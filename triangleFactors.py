#Project Euler - Problem 12
#solution by capntimb (Andy Wheeler)
#
#"The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be: 
#
#        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?"

import math

### triangleFactors(lim) takes a number
### and returns the first triangle number to have over that many divisors
def triangleFactors(lim):
    triangle = 0
    for n in range(1, lim**2):
        #print "Fusing %i and %i to make %i!" % (triangle, n, triangle+n)
        #generate nth triangle number
        triangle += n
        #factor nth triangle number
        factors = findFactors(triangle)
        if len(factors) > lim:
            return triangle
            
### findFactors(x) takes a number and returns the numbers which divide it evenly
def findFactors(x):
    factors = []
    for n in range(1, int(math.sqrt(x))+1):
        if x%n == 0:
            if n not in factors:
                factors.append(n)
                factors.append(x/n)
    return factors
    
print findFactors(28)

if triangleFactors(5) == 28:
    print "triangleFactors(5) passed"
else:
    print "triangleFactors(5) failed"
    
print triangleFactors(500)
